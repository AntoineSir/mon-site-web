<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Antoine Sireyjol on Antoine Sireyjol</title>
    <link>/</link>
    <description>Recent content in Antoine Sireyjol on Antoine Sireyjol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Quelques astuces du langage R</title>
      <link>/post/quelques-particularit%C3%A9s-de-dplyr/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/quelques-particularit%C3%A9s-de-dplyr/</guid>
      <description>&lt;p&gt;On poste ici quelques aspects de R qui peuvent sembler surprenants. Ils ont souvent des conséquences sur les vitesses d’exécution des instructions. On en propose pour l’instant trois, mais le post pourra être actualisé par la suite. Les points explorés dans cette note sont les suivants :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pour dplyr : la &lt;a href=&#34;#ralentissement-de-la-vitesse-dexecution-pour-une-creation-de-variable-directement-a-linterieur-de-summarise&#34;&gt;création d’une variable directement à l’intérieur de summarise()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Encore sur dplyr : le temps d’exécution d’un &lt;a href=&#34;#group_by-par-une-variable-caractere&#34;&gt;group_by par une variable caractère&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pour base R : la question de &lt;a href=&#34;#definition-dune-fonction-apply-sur-les-colonnes-dun-dataframe&#34;&gt;l’application d’une fonction apply aux colonnes d’un data.frame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;ralentissement-de-la-vitesse-dexecution-pour-une-creation-de-variable-directement-a-linterieur-de-summarise&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Ralentissement de la vitesse d’exécution pour une création de variable directement à l’intérieur de summarise()&lt;/h1&gt;
&lt;p&gt;Si on reprend l’exemple donné dans &lt;a href=&#34;https://antoinesir.netlify.com/post/vitesses-d-agr%C3%A9gation-de-data-table-et-dplyr/&#34;&gt;le précédent post&lt;/a&gt;, vous avez pu remarquer que :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Rappel : df &amp;lt;- data.frame(id1 = c(1:100), idgpe = sample(50), replace = TRUE)
df %&amp;gt;% as_tibble() %&amp;gt;% mutate(var = rnorm(100)) %&amp;gt;% 
group_by(idgpe) %&amp;gt;% summarise(var_mean = mean(var)) -&amp;gt; output_tibble&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pouvait se réécrire de manière plus directe (comme le fait d’ailleurs la partie sur data.table) ainsi :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% as_tibble() %&amp;gt;%  group_by(idgpe) %&amp;gt;% 
  summarise(var_mean = mean(rnorm(100))) -&amp;gt; output_tibble&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C’est-à-dire en se passant du &lt;code&gt;mutate&lt;/code&gt; pour remplacer &lt;code&gt;var&lt;/code&gt; par sa valeur dans &lt;code&gt;summarise&lt;/code&gt;.&lt;br /&gt;
Hé bien, cette instruction n’est pas seulement présentée ainsi pour le plaisir de vous montrer la fonction &lt;code&gt;mutate&lt;/code&gt;, mais aussi parce que la première option est bien plus rapide que la seconde, comme le montre la fonction &lt;code&gt;microbenchmark&lt;/code&gt; :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;microbenchmark::microbenchmark(times=100L, dplyr1 = {
  df %&amp;gt;% as_tibble() %&amp;gt;% mutate(var = rnorm(100)) %&amp;gt;% 
    group_by(idgpe) %&amp;gt;% summarise(var_mean = mean(var)) 
}, dplyr2 = {
  df %&amp;gt;% as_tibble() %&amp;gt;% group_by(idgpe) %&amp;gt;% 
    summarise(var_mean = mean(rnorm(100))) 
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: milliseconds
##    expr      min       lq     mean   median       uq      max neval
##  dplyr1 1.513245 1.557619 1.769535 1.574116 1.603414 14.55957   100
##  dplyr2 2.598685 2.649031 2.772782 2.669796 2.713316  4.61312   100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ca peut sembler secondaire pour cet exemple, mais sur des grosses tables la différence va vraiment peser. Regardons par exemple les différences de performance de deux instructions &lt;code&gt;dplyr&lt;/code&gt; agrégeant par heure une variable égale au pourcentage de retard à l’arrivée par rapport à la durée du vol en utilisant les données de &lt;code&gt;nycflights13&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(id1 = c(1:100), idgpe = sample(50), replace = TRUE)
microbenchmark::microbenchmark(times=10L, dplyr_mutate = {
flightstib %&amp;gt;% mutate(propor_delay = arr_delay / air_time) %&amp;gt;% 
group_by(time_hour) %&amp;gt;% 
summarise(propor_delay = mean(propor_delay)) -&amp;gt; output_dplyr 
}, dplyr_sans_mutate = {
flightstib %&amp;gt;% group_by(time_hour) %&amp;gt;% 
summarise(propor_delay = mean(arr_delay / air_time)) -&amp;gt; output_dplyr 
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: milliseconds
##               expr       min        lq     mean    median        uq
##       dplyr_mutate  24.66986  25.37301  30.2097  28.20835  31.55057
##  dplyr_sans_mutate 206.16357 210.86316 237.4071 238.59307 257.07684
##        max neval
##   50.80347    10
##  282.86570    10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Les performances changent du tout au tout. Il semblerait donc que cela soit une très mauvais pratique d’essayer de “sauter” l’étape du &lt;code&gt;mutate()&lt;/code&gt;, sans doute parce que le &lt;code&gt;group_by&lt;/code&gt; peine à traiter le regroupement d’une opération de variables pas encore regroupées. C’est une propriété de &lt;code&gt;summarise&lt;/code&gt; qu’il est important d’avoir à l’esprit.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;group_by-par-une-variable-caractere&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;group_by par une variable caractère&lt;/h1&gt;
&lt;p&gt;Quelque chose de très simple à faire pour optimiser ses codes : ne pas faire de group_by sur des variables caractères mais sur des factors. On montre ici un exemple très simple sur la même base flights. Tout d’abord, faisons une moyenne des retards à l’arrivée groupée par le lieu d’origine :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flightstib %&amp;gt;% group_by(origin) %&amp;gt;% 
  summarize(mean_delay = mean(arr_delay, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On compare la rapidité de cette instruction, à celle-ci, qui fait la même chose sur une variable factor :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flightstib$originfac &amp;lt;- as.factor(flightstib$origin)
flightstib %&amp;gt;% group_by(originfac) %&amp;gt;% 
  summarize(mean_delay = mean(arr_delay, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le résultat de la fonction &lt;code&gt;microbenchmark&lt;/code&gt; appliquée à ces deux instructions donne :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Unit: milliseconds
##                expr      min       lq     mean   median       uq      max
##  group by character 14.83434 15.58186 17.66089 16.04892 17.67964 54.71231
##     group by factor 12.15488 12.75961 14.56278 13.39221 14.89152 33.56671
##  neval
##    100
##    100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La différence est de l’ordre de 20% et peut peser sur de stables plus grosses. À noter qu’on ne compte pas dans la comparaison le temps de transposition d’une variable caractère en factor, puisque celui-ci peut être amorti sur de plus nombreuses instructions ou être appliqué au moment de l’import des bases.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;definition-dune-fonction-apply-sur-les-colonnes-dun-dataframe&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Définition d’une fonction apply sur les colonnes d’un dataframe&lt;/h1&gt;
&lt;p&gt;__ en cours d’écriture __&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Vitesses d&#39;agrégation de data.table et dplyr</title>
      <link>/post/vitesses-d-agr%C3%A9gation-de-data-table-et-dplyr/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/vitesses-d-agr%C3%A9gation-de-data-table-et-dplyr/</guid>
      <description>&lt;p&gt;Comme on a pu le voir par exemple dans le &lt;a href=&#34;https://antoinesir.netlify.com/post/comparaisons-dplyr-data-table-base-r/&#34;&gt;précédent post&lt;/a&gt;, l’aggrégation est souvent utilisée en analyse de données. Il est donc intéressant de comparer les performances de &lt;code&gt;data.table&lt;/code&gt; et &lt;code&gt;dplyr&lt;/code&gt; de ce point de vue. Des benchamrks ont déjà été faits, et on peut les trouver cette &lt;a href=&#34;https://stackoverflow.com/questions/21435339/data-table-vs-dplyr-can-one-do-something-well-the-other-cant-or-does-poorly&#34;&gt;discussion sur stackoverflow&lt;/a&gt; évoquée plus haut. On propose ici quelques tests comparatifs complémentaires sur un cas de groupement d’une base fictive de &lt;code&gt;nbrow&lt;/code&gt; lignes appartenant à &lt;code&gt;nbgpe&lt;/code&gt; groupes. La fonction est la suivante :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(data.table)
library(microbenchmark)

test_group_by &amp;lt;- function(nbrow, nbgpe){
  test &amp;lt;- as_tibble(data.frame(x = rnorm(nbrow), y = sample(floor(nbgpe), replace = TRUE)))
  testDT &amp;lt;- as.data.table(test)
  
  return(autoplot(
    microbenchmark::microbenchmark(times = 10, unit=&amp;quot;ms&amp;quot;, 
                                   DplyR = test %&amp;gt;% group_by(y) %&amp;gt;% summarise(x = mean(x)),
                                   data.table = testDT[, x:= mean(x), by = y]),
    log = FALSE)
    + ggtitle(paste0(nbrow, &amp;quot; lignes pour &amp;quot;, nbgpe, &amp;quot; groupes &amp;quot;)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notez qu’on en profite pour se faire mousser facilement avec &lt;code&gt;autoplot&lt;/code&gt; de &lt;code&gt;ggplot2&lt;/code&gt; qui sort les résultats de &lt;code&gt;microbenchmark&lt;/code&gt; sous forme d’un joli graphique.&lt;/p&gt;
&lt;p&gt;Il n’y a plus qu’à tester! On propose des tests sur 10 000, 100 000 et 1 million de lignes avec à chaque fois peu (1/1000e du nombre de lignes) ou beaucoup (la moitié du nombre de lignes) de groupes. On fait un tableau récapitulatif des différents graphiques (avec l’aide du package &lt;code&gt;gridExtra&lt;/code&gt;) : &lt;img src=&#34;/post/2018-11-15-vitesses-d-agrégation-de-data-table-et-dplyr_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparaisons dplyr - data.table - base R</title>
      <link>/post/comparaisons-dplyr-data-table-base-r/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/comparaisons-dplyr-data-table-base-r/</guid>
      <description>&lt;p&gt;La richesse de R, alimentée par une communauté de développeurs très active, rend le choix d’une méthode adaptée à une problématique donnée difficile, et c’est tant mieux. Vous trouverez ici une modeste participation au débat qui oppose les deux packages d’analyse des données les plus en vue dans la communauté R : &lt;code&gt;data.table&lt;/code&gt; et &lt;code&gt;dplyr&lt;/code&gt;. L’article se présente en deux parties :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rappels-sur-dplyr-et-data.table&#34;&gt;Un rappel sur les syntaxes de dplyr et data.table&lt;/a&gt;, que vous pouvez passer si vous connaissez déjà les packages.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comparaisons-sur-une-etude-de-cas-simple&#34;&gt;Une comparaison de l’efficacité des deux packages&lt;/a&gt; sur une étude de cas à partir des données du package &lt;code&gt;nycflights13&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;rappels-sur-dplyr-et-data.table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rappels sur dplyr et data.table&lt;/h1&gt;
&lt;p&gt;Si vous connaissez déjà la syntaxe de ces packages, vous pouvez directement aller à la partie &lt;a href=&#34;#comparaisons-sur-une-etude-de-cas-simple&#34;&gt;Comparaisons sur une étude de cas simple&lt;/a&gt;. On rappelle ici les principales caractéristiques de ces packages mais pour se former à leur utilisation on peut se référer à l’excellent &lt;a href=&#34;https://teaching.slmc.fr/perf/presentation_handout.pdf&#34;&gt;cours de perfectionnement de Martin Chevalier&lt;/a&gt;. Pour une exploration de ce qu’englobe le &lt;code&gt;tidyverse&lt;/code&gt; et notamment une présentation des commandes de &lt;code&gt;dplyr&lt;/code&gt;, vous pouvez jeter un oeil à &lt;a href=&#34;https://juba.github.io/tidyverse/index.html&#34;&gt;l’introduction à R et au tidyverse&lt;/a&gt; de J. Barnier. Enfin pour data.table, on trouve des informations utiles sur le cours &lt;a href=&#34;http://larmarange.github.io/analyse-R/manipulations-avancees-avec-data-table.html&#34;&gt;Manipulations avancée avec data.table&lt;/a&gt; de J. Larmarange.&lt;/p&gt;
&lt;div id=&#34;dplyr-et-le-tidyverse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;dplyr et le tidyverse&lt;/h2&gt;
&lt;p&gt;Le &lt;code&gt;tidyverse&lt;/code&gt; (contraction de “tidy” et “universe”) est un concept initié par Hadley Wickham, chef statisticien de RStudio. Il regroupe un ensemble de packages utiles au traitement statistique et au nettoyage de bases de données. On va s’intéresser ici presque seulement au package &lt;code&gt;dplyr&lt;/code&gt; (dont les instructions seront appliquées aux &lt;code&gt;tibbles&lt;/code&gt;, un format de data.frame issu du &lt;code&gt;tidyverse&lt;/code&gt;), mais vous pouvez parcourir les packages proposés dans le tidyverse sur &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;le site officiel&lt;/a&gt;.&lt;br /&gt;
&lt;code&gt;dplyr&lt;/code&gt; propose un ensemble d’opérations de traitement de données sous une syntaxe différente de celle utilisée dans les fonctions de base de R. Ce langage présente le double avantage d’être à la fois lisible pour quelqu’un habitué aux langages tels que SAS ou SQL et de proposer des fonctions optimisées qui présentent de bonnes performances en termes de temps d’exécution. La grammaire &lt;code&gt;dplyr&lt;/code&gt; s’appuie en effet sur des fonctions au nom explicite :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutate(data, newvar1=fonction(var1,var2...))&lt;/code&gt; et &lt;code&gt;transmute(data, newvar1=fonction(var1,var2...))&lt;/code&gt; créent de nouvelles variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter(data, condition)&lt;/code&gt; sélectionne au sein d’une table certaines observations, à la manière de &lt;code&gt;where&lt;/code&gt; dans SAS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange(data, var1, descending var2,...)&lt;/code&gt; trie une base selon une ou plusieurs variables (l’équivalent d’une &lt;code&gt;proc sort&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select(data, var1 : varX)&lt;/code&gt; sélectionne certaines variables dans une base, à la manière de &lt;code&gt;keep&lt;/code&gt; dans SAS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarise(data, newvar1=mean(var1), newvar2=sum(var2))&lt;/code&gt; réalise toute sorte d’opérations statistiques sur une table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_by(data, var)&lt;/code&gt; regroupe une table par une variable&lt;/li&gt;
&lt;li&gt;et bien d’autres…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un aspect pratique de ce langage est que toutes ces opérations peuvent être chaînées à l’aide de l’opérateur &lt;code&gt;%&amp;gt;%&lt;/code&gt; (“pipe”) dont la syntaxe est la suivante : &lt;code&gt;data %&amp;gt;% fonction(...)&lt;/code&gt; est équivalent à &lt;code&gt;fonction(data, ...)&lt;/code&gt;. Cette syntaxe permet de chaîner un grand nombre d’opérations sur une base commune, en limitant le nombre de fois où l’on écrit des tables intermédiaires tout en conservant une grande lisibilité du code. Ce petit exemple vous en convaincra peut-être :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse) # On aurait aussi pu charger seulement le package dplyr
# on crée un data frame avec 100 lignes, chaque individu appartenant à un des 50 groupes
df &amp;lt;- data.frame(id1 = c(1:100), idgpe = sample(50), replace = TRUE)

# on y applique les instructions de dplyr
df %&amp;gt;% as_tibble() %&amp;gt;% mutate(var = rnorm(100)) %&amp;gt;% 
  group_by(idgpe) %&amp;gt;% summarise(var_mean = mean(var)) -&amp;gt; output_tibble&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Un regard peu habitué contesterait peut-être l’aspect très lisible de l’instruction, mais ça l’est réellement. Le déroulé est le suivant :&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;on transforme notre data.frame en tibble (pour rappel : format optimisé de data.frame pour dplyr) avec &lt;code&gt;as_tibble&lt;/code&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;on crée une variable &lt;code&gt;var&lt;/code&gt; avec &lt;code&gt;mutate&lt;/code&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;on agrège par &lt;code&gt;idgpe&lt;/code&gt; avec &lt;code&gt;group_by&lt;/code&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;on calcule la moyenne de &lt;code&gt;var&lt;/code&gt; avec &lt;code&gt;summarise&lt;/code&gt;, que l’on stocke dans &lt;code&gt;var_mean&lt;/code&gt;. Comme cette instruction suit un group_by, elle est réalisée à l’intérieur de chaque groupe (défini par &lt;code&gt;idgpe&lt;/code&gt;), sinon elle aurait été réalisé sur l’ensemble de la table.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tout cela est stocké dans une table output_tibble, qui est (si vous avez suivi) un tibble agrégé par &lt;code&gt;idgpe&lt;/code&gt; et qui a donc 50 lignes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data.table&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data.table&lt;/h2&gt;
&lt;p&gt;Le package &lt;code&gt;data.table&lt;/code&gt; ne prétend pas, contrairement au &lt;code&gt;tidyverse&lt;/code&gt;, proposer une syntaxe concurrente à base R mais enrichir celle-ci. Il est axé autour d’un nouveau format d’objet, le data.table, qui est un type de data.frame qui permet une utilisation optimisée de l’opérateur &lt;code&gt;[&lt;/code&gt;.&lt;br /&gt;
Tout data.frame peut être converti en data.table grâce à la fonction &lt;code&gt;as.data.table&lt;/code&gt;, ou, de manière plus optimale pour l’utilisation de la mémoire, grâce à la fonction &lt;code&gt;setDT&lt;/code&gt; qui permet de directement transformer la nature de l’objet sans avoir à en écrire un autre. Il est important d’avoir en tête qu’un data.frame converti en data.table conserve les caractéristiques d’un data.frame. Cependant, l’opérateur &lt;code&gt;[&lt;/code&gt; appliqué au data.table change de signification et devient :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DT[i,j,by]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avec &lt;code&gt;i&lt;/code&gt; qui permet de sélectionner des observations (sans avoir besoin de répéter le nom de la base dans laquelle on se trouve), &lt;code&gt;j&lt;/code&gt; qui permet de créer ou sélectionner des variables et &lt;code&gt;by&lt;/code&gt; de regrouper les traitement selon les modalités d’une variable définie. Comme dans &lt;code&gt;dplyr&lt;/code&gt;, il est possible de chaîner les opérations réalisées comme le montre l’exemple suivant, qui reprend le même cas de figure que celui illustrant le package &lt;code&gt;dplyr&lt;/code&gt; :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table) 
# on convertit notre data frame précédemment créé en data.table
dt &amp;lt;- as.data.table(df)

# on y applique les même instructions
dt[, list(var_mean = mean(rnorm(100))), by = list(idgpe = idgpe)] -&amp;gt; output_dt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le fait de renseigner mes variables au sein de &lt;code&gt;list()&lt;/code&gt; me permet d’avoir une table en sortie au niveau de &lt;code&gt;idgpe&lt;/code&gt; (donc 50 observations), sans cela ma variable est bien moyennée par groupe mais la table en sortie est toujours au niveau &lt;code&gt;id1&lt;/code&gt; (100 observations).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;vitesses-dexecution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vitesses d’exécution&lt;/h2&gt;
&lt;p&gt;Voilà donc pour les présentations! Allez, on montre le résultat d’un petit &lt;code&gt;microbenchmark&lt;/code&gt; des deux juste pour voir :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Unit: microseconds
##        expr      min        lq     mean   median       uq      max neval
##       dplyr 1539.983 1584.6405 1779.172 1631.005 1868.801 4469.760   100
##  data.table  833.992  850.2055  937.905  891.450 1005.512 1517.227   100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sur cet exemple, on voit un avantage clair à data.table! Mais on est sur une toute petite table en entrée. On va essayer de se rapprocher de cas plus concrets en s’intéressant à un exemple sur des bases plus importantes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;comparaisons-sur-une-etude-de-cas-simple&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comparaisons sur une étude de cas simple&lt;/h1&gt;
&lt;p&gt;Les avantages et inconvénients de ces deux packages sont à l’origine de nombreux débats. Vous pouvez vous en convaincre en suivant &lt;a href=&#34;https://stackoverflow.com/questions/21435339/data-table-vs-dplyr-can-one-do-something-well-the-other-cant-or-does-poorly&#34;&gt;cette discussion sur stackoverflow&lt;/a&gt;. On peut quand même dégager deux compromis :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Le choix de l’un ou l’autre des packages dépend beaucoup de ce que l’on va en faire (types d’analyses, taille des données, profils des utilisateurs du code…).&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Les deux packages sont plus intéressants que base R pour l’analyse de données, que ce soit en termes de facilité d’écriture ou de performances.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour ce deuxième point, on va essayer de s’en convaincre ensemble avec ce petit exemple.&lt;/p&gt;
&lt;div id=&#34;notre-etude-de-cas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Notre étude de cas&lt;/h2&gt;
&lt;p&gt;Pour cet exemple, on utilise les données du package de Hadley Wickham (oui, le même qui est à l’origine du &lt;code&gt;tidyverse&lt;/code&gt;, mais ça n’entamera pas notre indépendance) que l’on trouve dans &lt;code&gt;nycflights13&lt;/code&gt;. En particulier, la base &lt;code&gt;flights&lt;/code&gt; donne toutes les heures de départ et d’arrivée selon les aéroports de départ et d’arrivée ainsi que les retards au départ et à l’arrivée. La base &lt;code&gt;weather&lt;/code&gt; donne elle des indications météo, heure par heure, dans chaque aéroport. Tout bon statisticien qui se respecte devrait commencer à se dire qu’il y a quelque chose à faire pour tenter d’expliquer les retards des avions (&lt;em&gt;spoiler alert&lt;/em&gt; : on ne va pas le faire).&lt;br /&gt;
Commençons par charger nos packages (n’oubliez pas de faire &lt;code&gt;install.packages(&amp;quot;nom_pck&amp;quot;)&lt;/code&gt; avant si vous ne l’avez jamais fait) et nos données :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Les packages nécessaires
library(tidyverse) # Regroupe différents packages, voir https://www.tidyverse.org/ 
library(data.table)
library(microbenchmark) # Pour les calculs de vitesse d&amp;#39;exécution
library(nycflights13) # Pour les données

# data frame classiques pour tests en base R
flights &amp;lt;- as.data.frame(flights)
weather &amp;lt;- as.data.frame(weather)
# data.table pour tests avec data.table
flightsdt &amp;lt;- as.data.table(flights)
weatherdt &amp;lt;- as.data.table(weather)
# tibbles pour instructions en dplyR (tournent aussi sur data.frame et data.table)
flightstib &amp;lt;- as_tibble(flights)
weathertib &amp;lt;- as_tibble(weather)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notez que l’on n’est pas obligés de faire du dplyr sur des tibbles plutôt que des data frame, mais on suit ici les recommandations d’Hadley Wickham.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;moyenne-des-retards-et-fusion-des-tables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Moyenne des retards et fusion des tables&lt;/h2&gt;
&lt;p&gt;Un rapide examen des bases vous montre que la première étape avant toute analyse est comme souvent de regrouper les éléments de flights par heure et aéroport de départ (ou aurait aussi pu prendre aéroport d’arrivée) pour pouvoir les fusionner avec la table weather, qui donnent les indications météo minute par minute. On écrit cette instruction de manières différentes :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;En base R&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights_time_hour &amp;lt;- aggregate.data.frame(list(arr_delay = flights$arr_delay, 
                                    dep_delay = flights$dep_delay), 
                                      list(time_hour = flights$time_hour, origin = flights$origin), 
                                      mean)
output_base &amp;lt;- merge(weather, flights_time_hour, by = c(&amp;quot;time_hour&amp;quot;, &amp;quot;origin&amp;quot;), sort = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(J’ai utilisé &lt;code&gt;aggregate.data.frame&lt;/code&gt; et pas &lt;code&gt;tapply&lt;/code&gt; pour avoir directement un data.frame en sortie)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;En dplyr&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flightstib %&amp;gt;% group_by(time_hour, origin) %&amp;gt;% 
  summarise(arr_delay = mean(arr_delay),
            dep_delay = mean(dep_delay)) %&amp;gt;% 
  inner_join(weathertib, by = c(&amp;quot;time_hour&amp;quot;, &amp;quot;origin&amp;quot;)) -&amp;gt; output_dplyr &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;En data.table&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;output_DT &amp;lt;- merge(flightsdt[, list(arr_perc_delay = mean(arr_delay),
                       dep_perc_delay = mean(dep_delay)), by = c(&amp;quot;time_hour&amp;quot;, &amp;quot;origin&amp;quot;)],
      weatherdt, by = c(&amp;quot;time_hour&amp;quot;, &amp;quot;origin&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;J’ai utilisé la fonction &lt;code&gt;merge&lt;/code&gt; plutôt que &lt;code&gt;DT1[DT2, on = c(&amp;quot;time_hour&amp;quot;, &amp;quot;origin&amp;quot;), nomatch = 0]&lt;/code&gt; car j’ai constaté qu’elle était plus rapide, conformément à ce que montre bien cet &lt;a href=&#34;https://jozefhajnala.gitlab.io/r/r006-merge/&#34;&gt;article du Jozef’s Rblog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;comparaisons-des-vitesses-dexecution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Comparaisons des vitesses d’exécution&lt;/h2&gt;
&lt;p&gt;Je vous laisse juger de la lisibilité de chacune de ces instructions, qui font toutes la même chose, car c’est finalement assez subjectif. On donne ici les résultats d’un &lt;code&gt;microbenchmark&lt;/code&gt; de ces instructions :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Unit: milliseconds
##   expr        min         lq       mean     median         uq        max
##   Base 2532.70001 2547.65211 2614.52265 2588.78021 2644.28924 2764.51591
##  DplyR   60.37445   60.89670   62.54289   62.48617   63.71156   64.82658
##     DT   34.58730   35.04184   36.93675   35.48301   35.80700   50.99746
##  neval
##     10
##     10
##     10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Les résultats sont très nettement en faveur des packages &lt;code&gt;dplyr&lt;/code&gt; et &lt;code&gt;data.table&lt;/code&gt;, ce dernier ayant l’avantage. Sans doute existe-t-il des moyens de plus optimiser l’instruction en base R, mais là n’est pas vraiment la question. On voit qu’avec une syntaxe simple et lisible, &lt;code&gt;dplyr&lt;/code&gt; et &lt;code&gt;data.table&lt;/code&gt; font beaucoup mieux que l’instruction qui viendrait à l’esprit d’un statisticien qui n’utiliserait que les premières fonctions venues de base R.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Example Page</title>
      <link>/tutorial/example/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>/tutorial/example/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0200</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0100</pubDate>
      
      <guid>/talk/example-talk/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;em&gt;Slides&lt;/em&gt; feature and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>/project/deep-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0200</pubDate>
      
      <guid>/project/deep-learning/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/example-external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0200</pubDate>
      
      <guid>/project/example-external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Person Re-Identification System For Mobile Devices</title>
      <link>/publication/person-re-identification/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0200</pubDate>
      
      <guid>/publication/person-re-identification/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile visual clothing search</title>
      <link>/publication/clothing-search/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0200</pubDate>
      
      <guid>/publication/clothing-search/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
  One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
